name: Backup

on:
  push:
    branches: [ main, dev ]
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm install -g firebase-tools

      - name: Setup Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          if [ -z "$FIREBASE_SERVICE_ACCOUNT" ]; then
            echo "Error: FIREBASE_SERVICE_ACCOUNT secret is not set"
            exit 1
          fi
          if [ -z "$FIREBASE_PROJECT_ID" ]; then
            echo "Error: FIREBASE_PROJECT_ID secret is not set"
            exit 1
          fi
          echo "$FIREBASE_SERVICE_ACCOUNT" > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="$PWD/firebase-service-account.json"

      - name: Export Database
        run: |
          mkdir -p backup
          firebase firestore:export backup/firestore.json --project ${{ secrets.FIREBASE_PROJECT_ID }}
        continue-on-error: true

      - name: Create Backup
        run: |
          mkdir -p backups
          timestamp=$(date +%Y%m%d-%H%M%S)
          # Create source code backup
          git archive --format=tar.gz -o "backups/source-$timestamp.tar.gz" HEAD
          # Copy database backup if it exists
          if [ -f backup/firestore.json ]; then
            cp backup/firestore.json "backups/firestore-$timestamp.json"
          fi
          # Create backup info file
          echo "Backup created at: $(date)" > "backups/info-$timestamp.txt"
          echo "Commit: ${{ github.sha }}" >> "backups/info-$timestamp.txt"
          echo "Branch: ${{ github.ref_name }}" >> "backups/info-$timestamp.txt"

      - name: Upload Backup
        uses: actions/upload-artifact@v3
        with:
          name: backup-${{ github.sha }}
          path: backups/
          retention-days: 30

      - name: Update Backup Status
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            gh run list --workflow=backup.yml --json conclusion,createdAt --jq '.[] | select(.conclusion=="success") | .createdAt' | head -n 1 > last_successful_backup.txt
          fi

      - name: Create Status Issue
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const title = 'ðŸ”´ Backup Failed';
            const body = `
            # Backup Failed
            
            - **Workflow Run**: [View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - **Commit**: [${context.sha.slice(0, 7)}](${context.payload.repository.html_url}/commit/${context.sha})
            - **Branch**: ${context.ref}
            - **Timestamp**: ${new Date().toISOString()}
            
            Please check the workflow logs for more details.
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['backup', 'bug']
            });

      - name: Cleanup
        if: always()
        run: |
          rm -f firebase-service-account.json
          rm -rf backup/
          rm -rf backups/
